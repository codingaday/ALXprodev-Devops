#!/bin/bash

# Parallel Pokémon fetching using background jobs, actively demonstrating 'jobs' and 'kill'

POKEMONS=("bulbasaur" "ivysaur" "venusaur" "charmander" "charmeleon")
OUTPUT_DIR="pokemon_data"
mkdir -p "$OUTPUT_DIR"

fetch_pokemon() {
    local name=$1
    local url="https://pokeapi.co/api/v2/pokemon/${name}"
    local outfile="${OUTPUT_DIR}/${name}.json"

    echo "Fetching data for $name..."
    curl -s "$url" | jq . > "$outfile" && \
    echo "Saved data to $outfile ✅" || \
    echo "Failed to fetch $name"
}

# Start background jobs
for p in "${POKEMONS[@]}"; do
    fetch_pokemon "$p" &
done

# Show current background jobs
echo "Current background jobs:"
jobs

# Demonstrate active kill usage:
# We will kill any background job that is still running after 5 seconds

sleep 5

echo "Killing any still-running background jobs..."
kill $(jobs -p) 2>/dev/null && echo "Killed background jobs." || echo "No jobs to kill."

# Wait for all jobs to finish or be killed
wait

echo "All fetches complete or killed."
